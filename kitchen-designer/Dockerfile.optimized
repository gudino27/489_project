# syntax=docker/dockerfile:1.4
# Optimized Multi-stage Dockerfile for Kitchen Designer Frontend
# Uses BuildKit cache mounts and advanced optimization techniques

ARG NODE_VERSION=20-alpine
ARG NGINX_VERSION=alpine
ARG BUILD_DATE
ARG GIT_SHA

# Base stage with common dependencies
FROM node:${NODE_VERSION} AS base
WORKDIR /app
ENV NODE_ENV=production
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV CI=true
ENV GENERATE_SOURCEMAP=false

# Dependencies stage with cache mounts
FROM base AS dependencies
COPY package*.json ./
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/app/.npm \
    npm ci --only=production --no-audit --no-fund --prefer-offline

# Development dependencies (for testing/development)
FROM dependencies AS dev-dependencies
ENV NODE_ENV=development
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/app/.npm \
    npm ci --no-audit --no-fund --prefer-offline

# Development stage
FROM base AS development
COPY --from=dev-dependencies /app/node_modules ./node_modules
COPY . .
USER node
EXPOSE 3000
CMD ["npm", "start"]

# Test stage
FROM development AS test
ENV NODE_ENV=test
RUN npm run test --if-present --watchAll=false --coverage || true

# Build stage with optimizations
FROM base AS builder
COPY --from=dependencies /app/node_modules ./node_modules
COPY . .

# Optimize build process
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN --mount=type=cache,target=/app/.parcel-cache \
    --mount=type=cache,target=/app/node_modules/.cache \
    npm run build

# Production nginx stage
FROM nginx:${NGINX_VERSION} AS production
WORKDIR /usr/share/nginx/html

# Remove default nginx content
RUN rm -rf /usr/share/nginx/html/*

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/build .

# Create non-root user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Add build metadata
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.revision=${GIT_SHA}
LABEL org.opencontainers.image.title="Kitchen Designer Frontend"
LABEL org.opencontainers.image.description="React frontend for Gudino Custom Cabinets"

USER nginx
EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]